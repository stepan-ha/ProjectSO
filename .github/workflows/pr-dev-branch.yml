name: Validate PR on dev branch

on:
    pull_request:
      types: [opened, synchronize]
      branches: [ dev ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'CRM/Project/force-app/**'

jobs:
    validate-deployment-on-dev-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}

        steps:

              uses: actions/setup-node@v4
              with:
                node-version: '18.18.0' # Specify the exact Node.js version required

            - name: Verify Node.js version
              run: node -v

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
                  
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk

            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner


            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./CRM/Project/authFile.json -s -a integration

            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 

            # Now we can use the sfdx scanner to scan the code in the delta directory
            # The output of the scan is stored in a file called apexScanResults.sarif
            #
            # The .sarif file can later be uploaded to github, so that we can see the 
            # results of the scan directly from the PR.
            - name: 'Scan code'
              run: |
                  cd changed-sources
                  sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
                  cd ..

            # Now we upload the .sarif file as explained in the previous step
            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v1
              with:
                sarif_file: changed-sources/apexScanResults.sarif

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json

            - name: 'Deploy destructive changes (if any)'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 
